using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

namespace DG.Tweening
{
    [Serializable]
    public class TweenData
    {
        public SequenceType sequenceType;
        public UpdateType updateType;
        public bool isSpeedBased;
        public bool hasOnStart;
        public bool hasOnPlay;
        public bool hasOnUpdate;
        public bool hasOnStepComplete;
        public bool hasOnComplete;
        public bool hasOnTweenCreated;
        public bool hasOnRewind;
        public UnityEvent onStart;
        public UnityEvent onPlay;
        public UnityEvent onUpdate;
        public UnityEvent onStepComplete;
        public UnityEvent onComplete;
        public UnityEvent onTweenCreated;
        public UnityEvent onRewind;

        public float atPosition;
        public TweenCallback callback;
        [NonSerialized] public Tween tween;

        public bool targetIsSelf = true; // If FALSE allows to set the target manually

        public GameObject targetGO; // Used in case targetIsSelf is FALSE

        // If FALSE always uses the GO containing this DOTweenAnimation (and not the one containing the target) as DOTween's SetTarget target
        public bool tweenTargetIsTargetGO = true;
        public float interval;
        public float delay;
        public float duration = 1;
        public Ease easeType = Ease.OutQuad;
        public AnimationCurve easeCurve = new(new Keyframe(0, 0), new Keyframe(1, 1));
        public LoopType loopType = LoopType.Restart;
        public int loops = 1;
        public string id = "";
        public bool isRelative;
        public bool isFrom;
        public bool isIndependentUpdate;
        public bool autoKill = true;
        public bool autoGenerate = true; // If TRUE automatically creates the tween at startup

        // public bool isActive = true;
        public bool isValid;
        public Component target;
        public DOTweenAnimation.AnimationType animationType;
        public DOTweenAnimation.TargetType targetType;
        public DOTweenAnimation.TargetType forcedTargetType; // Used when choosing between multiple targets
        public bool useTargetAsV3;

        public float endValueFloat;
        public Vector3 endValueV3;
        public Vector2 endValueV2;
        public Color endValueColor = new(1, 1, 1, 1);
        public string endValueString = "";
        public Rect endValueRect = new(0, 0, 0, 0);
        public Transform endValueTransform;

        public bool optionalBool0, optionalBool1;
        public float optionalFloat0;
        public int optionalInt0;
        public RotateMode optionalRotationMode = RotateMode.Fast;
        public ScrambleMode optionalScrambleMode = ScrambleMode.None;
        public ShakeRandomnessMode optionalShakeRandomnessMode = ShakeRandomnessMode.Full;
        public string optionalString;

        private bool _tweenAutoGenerationCalled; // TRUE after the tweens have been autoGenerated
        private int _playCount = -1; // Used when calling DOPlayNext
    }

    public class DoSequenceAnimation : MonoBehaviour
    {
        public Tween tween;
        public Sequence sequence;
        public bool isActive = true;
        public bool autoPlay = true;
        public bool autoKill = true;
        public bool autoGenerate = true; // If TRUE automatically creates the tween at startup

        private List<Tween> tweens = new();
        public List<Tween> Tweens => tweens;

        [SerializeField] private List<TweenData> tweenDataList = new(1);
        public List<TweenData> TweenDataList => tweenDataList;

        private void Awake()
        {
            CreateTweenOrSequence();
        }

        private void CreateTweenOrSequence()
        {
            if (!isActive || !autoGenerate) return;
            if (tweenDataList.Count == 1)
            {
                tween = CreateTween(tweenDataList[0]);
                tween.SetAutoKill(autoKill);
            }
            else
            {
                tweens = new List<Tween>();
                sequence = DOTween.Sequence().SetAutoKill(autoKill);
                for (int i = 0; i < tweenDataList.Count; i++)
                {
                    switch (tweenDataList[i].sequenceType)
                    {
                        case SequenceType.Append:
                            var t = CreateTween(tweenDataList[i], false, autoPlay);
                            tweens.Add(t);
                            sequence.Append(t);
                            break;
                        case SequenceType.Prepend:
                            var t1 = CreateTween(tweenDataList[i], false, autoPlay);
                            tweens.Add(t1);
                            sequence.Prepend(t1);
                            break;
                        case SequenceType.Join:
                            var t2 = CreateTween(tweenDataList[i], false, autoPlay);
                            tweens.Add(t2);
                            sequence.Join(t2);
                            break;
                        case SequenceType.Insert:
                            var t3 = CreateTween(tweenDataList[i], false, autoPlay);
                            tweens.Add(t3);
                            sequence.Insert(tweenDataList[i].atPosition, t3);
                            break;
                        case SequenceType.AppendInterval:
                            sequence.AppendInterval(tweenDataList[i].interval);
                            break;
                        case SequenceType.PrependInterval:
                            sequence.PrependInterval(tweenDataList[i].interval);
                            break;
                        case SequenceType.AppendCallback:
                            sequence.AppendCallback(tweenDataList[i].callback);
                            break;
                        case SequenceType.PrependCallback:
                            sequence.PrependCallback(tweenDataList[i].callback);
                            break;
                        case SequenceType.JoinCallback:
                            sequence.JoinCallback(tweenDataList[i].callback);
                            break;
                        case SequenceType.InsertCallback:
                            sequence.InsertCallback(tweenDataList[i].atPosition, tweenDataList[i].callback);
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
            }
        }

        private Tween CreateTween(TweenData tweenData, bool regenerateIfExists = false, bool andPlay = true)
        {
            if (!tweenData.isValid)
            {
                if (regenerateIfExists)
                {
                    // Called manually: warn users
                    Debug.LogWarning(
                        $"{gameObject.name} :: This DOTweenAnimation isn't valid and its tween won't be created", gameObject);
                }

                return null;
            }

            if (tweenData.tween != null)
            {
                if (tweenData.tween.active)
                {
                    if (regenerateIfExists) tweenData.tween.Kill();
                    else return null;
                }

                tweenData.tween = null;
            }

//            if (target == null) {
//                Debug.LogWarning(string.Format("{0} :: This DOTweenAnimation's target is NULL, because the animation was created with a DOTween Pro version older than 0.9.255. To fix this, exit Play mode then simply select this object, and it will update automatically", gameObject.name), gameObject);
//                return;
//            }

            GameObject tweenGO = GetTweenGO(tweenData);
            if (tweenData.target == null || tweenGO == null)
            {
                if (tweenData.targetIsSelf && tweenData.target == null)
                {
                    // Old error caused during upgrade from DOTween Pro 0.9.255
                    Debug.LogWarning(
                        $"{gameObject.name} :: This DOTweenAnimation's target is NULL, because the animation was created with a DOTween Pro version older than 0.9.255. To fix this, exit Play mode then simply select this object, and it will update automatically", gameObject);
                }
                else
                {
                    // Missing non-self target
                    Debug.LogWarning(
                        $"{gameObject.name} :: This DOTweenAnimation's target/GameObject is unset: the tween will not be created.", gameObject);
                }

                return null;
            }

            if (tweenData.forcedTargetType != DOTweenAnimation.TargetType.Unset)
                tweenData.targetType = tweenData.forcedTargetType;
            if (tweenData.targetType == DOTweenAnimation.TargetType.Unset)
            {
                // Legacy DOTweenAnimation (made with a version older than 0.9.450) without stored targetType > assign it now
                tweenData.targetType = TypeToDoTargetType(tweenData.target.GetType());
            }

            switch (tweenData.animationType)
            {
                case DOTweenAnimation.AnimationType.None:
                    break;
                case DOTweenAnimation.AnimationType.Move:
                    if (tweenData.useTargetAsV3)
                    {
                        tweenData.isRelative = false;
                        if (tweenData.endValueTransform == null)
                        {
                            Debug.LogWarning(
                                $"{gameObject.name} :: This tween's TO target is NULL, a Vector3 of (0,0,0) will be used instead", gameObject);
                            tweenData.endValueV3 = Vector3.zero;
                        }
                        else
                        {
#if true // UI_MARKER
                            if (tweenData.targetType == DOTweenAnimation.TargetType.RectTransform)
                            {
                                RectTransform endValueT = tweenData.endValueTransform as RectTransform;
                                if (endValueT == null)
                                {
                                    Debug.LogWarning(
                                        $"{gameObject.name} :: This tween's TO target should be a RectTransform, a Vector3 of (0,0,0) will be used instead", gameObject);
                                    tweenData.endValueV3 = Vector3.zero;
                                }
                                else
                                {
                                    RectTransform rTarget = tweenData.target as RectTransform;
                                    if (rTarget == null)
                                    {
                                        Debug.LogWarning(
                                            $"{gameObject.name} :: This tween's target and TO target are not of the same type. Please reassign the values", gameObject);
                                    }
                                    else
                                    {
                                        // Problem: doesn't work inside Awake (ararargh!)
                                        tweenData.endValueV3 =
                                            DOTweenModuleUI.Utils.SwitchToRectTransform(endValueT, rTarget);
                                    }
                                }
                            }
                            else
#endif
                                tweenData.endValueV3 = tweenData.endValueTransform.position;
                        }
                    }

                    switch (tweenData.targetType)
                    {
                        case DOTweenAnimation.TargetType.Transform:
                            tween = ((Transform)tweenData.target).DOMove(tweenData.endValueV3, tweenData.duration,
                                tweenData.optionalBool0);
                            break;
                        case DOTweenAnimation.TargetType.RectTransform:
#if true // UI_MARKER
                            tween = ((RectTransform)tweenData.target).DOAnchorPos3D(tweenData.endValueV3,
                                tweenData.duration, tweenData.optionalBool0);
#else
                    tween = ((Transform)target).DOMove(endValueV3, duration, optionalBool0);
#endif
                            break;
                        case DOTweenAnimation.TargetType.Rigidbody:
#if true // PHYSICS_MARKER
                            tween = ((Rigidbody)tweenData.target).DOMove(tweenData.endValueV3, tweenData.duration,
                                tweenData.optionalBool0);
#else
                    tween = ((Transform)target).DOMove(endValueV3, duration, optionalBool0);
#endif
                            break;
                        case DOTweenAnimation.TargetType.Rigidbody2D:
#if true // PHYSICS2D_MARKER
                            tween = ((Rigidbody2D)tweenData.target).DOMove(tweenData.endValueV3, tweenData.duration,
                                tweenData.optionalBool0);
#else
                    tween = ((Transform)target).DOMove(endValueV3, duration, optionalBool0);
#endif
                            break;
                    }

                    break;
                case DOTweenAnimation.AnimationType.LocalMove:
                    tween = tweenGO.transform.DOLocalMove(tweenData.endValueV3, tweenData.duration,
                        tweenData.optionalBool0);
                    break;
                case DOTweenAnimation.AnimationType.Rotate:
                    switch (tweenData.targetType)
                    {
                        case DOTweenAnimation.TargetType.Transform:
                            tween = ((Transform)tweenData.target).DORotate(tweenData.endValueV3, tweenData.duration,
                                tweenData.optionalRotationMode);
                            break;
                        case DOTweenAnimation.TargetType.Rigidbody:
#if true // PHYSICS_MARKER
                            tween = ((Rigidbody)tweenData.target).DORotate(tweenData.endValueV3, tweenData.duration,
                                tweenData.optionalRotationMode);
#else
                    tween = ((Transform)target).DORotate(endValueV3, duration, optionalRotationMode);
#endif
                            break;
                        case DOTweenAnimation.TargetType.Rigidbody2D:
#if true // PHYSICS2D_MARKER
                            tween = ((Rigidbody2D)tweenData.target).DORotate(tweenData.endValueFloat,
                                tweenData.duration);
#else
                    tween = ((Transform)target).DORotate(endValueV3, duration, optionalRotationMode);
#endif
                            break;
                    }

                    break;
                case DOTweenAnimation.AnimationType.LocalRotate:
                    tween = tweenGO.transform.DOLocalRotate(tweenData.endValueV3, tweenData.duration,
                        tweenData.optionalRotationMode);
                    break;
                case DOTweenAnimation.AnimationType.Scale:
                    switch (tweenData.targetType)
                    {
#if false // TK2D_MARKER
                case TargetType.tk2dTextMesh:
                    tween =
 ((tk2dTextMesh)target).DOScale(optionalBool0 ? new Vector3(endValueFloat, endValueFloat, endValueFloat) : endValueV3, duration);
                    break;
                case TargetType.tk2dBaseSprite:
                    tween =
 ((tk2dBaseSprite)target).DOScale(optionalBool0 ? new Vector3(endValueFloat, endValueFloat, endValueFloat) : endValueV3, duration);
                    break;
#endif
                        default:
                            tween = tweenGO.transform.DOScale(
                                tweenData.optionalBool0
                                    ? new Vector3(tweenData.endValueFloat, tweenData.endValueFloat,
                                        tweenData.endValueFloat)
                                    : tweenData.endValueV3,
                                tweenData.duration);
                            break;
                    }

                    break;
#if true // UI_MARKER
                case DOTweenAnimation.AnimationType.UIWidthHeight:
                    tween = ((RectTransform)tweenData.target).DOSizeDelta(
                        tweenData.optionalBool0
                            ? new Vector2(tweenData.endValueFloat, tweenData.endValueFloat)
                            : tweenData.endValueV2, tweenData.duration);
                    break;
                case DOTweenAnimation.AnimationType.FillAmount:
                    tween = ((Image)tweenData.target).DOFillAmount(tweenData.endValueFloat, tweenData.duration);
                    break;
#endif
                case DOTweenAnimation.AnimationType.Color:
                    tweenData.isRelative = false;
                    switch (tweenData.targetType)
                    {
                        case DOTweenAnimation.TargetType.Renderer:
                            tween = ((Renderer)tweenData.target).material.DOColor(tweenData.endValueColor,
                                tweenData.duration);
                            break;
                        case DOTweenAnimation.TargetType.Light:
                            tween = ((Light)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                            break;
#if true // SPRITE_MARKER
                        case DOTweenAnimation.TargetType.SpriteRenderer:
                            tween = ((SpriteRenderer)tweenData.target).DOColor(tweenData.endValueColor,
                                tweenData.duration);
                            break;
#endif
#if true // UI_MARKER
                        case DOTweenAnimation.TargetType.Image:
                            tween = ((Graphic)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                            break;
                        case DOTweenAnimation.TargetType.Text:
                            tween = ((Text)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                            break;
#endif
#if false // TK2D_MARKER
                case TargetType.tk2dTextMesh:
                    tween = ((tk2dTextMesh)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                    break;
                case TargetType.tk2dBaseSprite:
                    tween = ((tk2dBaseSprite)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                    break;
#endif
#if false // TEXTMESHPRO_MARKER
                case TargetType.TextMeshProUGUI:
                    tween = ((TextMeshProUGUI)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                    break;
                case TargetType.TextMeshPro:
                    tween = ((TextMeshPro)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                    break;
#endif
                    }

                    break;
                case DOTweenAnimation.AnimationType.Fade:
                    tweenData.isRelative = false;
                    switch (tweenData.targetType)
                    {
                        case DOTweenAnimation.TargetType.Renderer:
                            tween = ((Renderer)tweenData.target).material.DOFade(tweenData.endValueFloat,
                                tweenData.duration);
                            break;
                        case DOTweenAnimation.TargetType.Light:
                            tween = ((Light)tweenData.target).DOIntensity(tweenData.endValueFloat, tweenData.duration);
                            break;
#if true // SPRITE_MARKER
                        case DOTweenAnimation.TargetType.SpriteRenderer:
                            tween = ((SpriteRenderer)tweenData.target).DOFade(tweenData.endValueFloat,
                                tweenData.duration);
                            break;
#endif
#if true // UI_MARKER
                        case DOTweenAnimation.TargetType.Image:
                            tween = ((Graphic)tweenData.target).DOFade(tweenData.endValueFloat, tweenData.duration);
                            break;
                        case DOTweenAnimation.TargetType.Text:
                            tween = ((Text)tweenData.target).DOFade(tweenData.endValueFloat, tweenData.duration);
                            break;
                        case DOTweenAnimation.TargetType.CanvasGroup:
                            tween = ((CanvasGroup)tweenData.target).DOFade(tweenData.endValueFloat, tweenData.duration);
                            break;
#endif
#if false // TK2D_MARKER
                case TargetType.tk2dTextMesh:
                    tween = ((tk2dTextMesh)tweenData.target).DOFade(tweenData.endValueFloat, tweenData.duration);
                    break;
                case TargetType.tk2dBaseSprite:
                    tween = ((tk2dBaseSprite)tweenData.target).DOFade(tweenData.endValueFloat, tweenData.duration);
                    break;
#endif
#if false // TEXTMESHPRO_MARKER
                case TargetType.TextMeshProUGUI:
                    tween = ((TextMeshProUGUI)tweenData.target).DOFade(tweenData.endValueFloat, tweenData.duration);
                    break;
                case TargetType.TextMeshPro:
                    tween = ((TextMeshPro)tweenData.target).DOFade(tweenData.endValueFloat, tweenData.duration);
                    break;
#endif
                    }

                    break;
                case DOTweenAnimation.AnimationType.Text:
#if true // UI_MARKER
                    switch (tweenData.targetType)
                    {
                        case DOTweenAnimation.TargetType.Text:
                            tween = ((Text)tweenData.target).DOText(tweenData.endValueString, tweenData.duration,
                                tweenData.optionalBool0, tweenData.optionalScrambleMode,
                                tweenData.optionalString);
                            break;
                    }
#endif
#if false // TK2D_MARKER
                switch (tweenData.targetType) {
                case TargetType.tk2dTextMesh:
                    tween =
 ((tk2dTextMesh)tweenData.target).DOText(tweenData.duration, tweenData.duration, tweenData.optionalBool0, tweenData.optionalScrambleMode, optionalString);
                    break;
                }
#endif
#if false // TEXTMESHPRO_MARKER
                switch (tweenData.targetType) {
                case TargetType.TextMeshProUGUI:
                    tween =
 ((TextMeshProUGUI)tweenData.target).DOText(tweenData.duration, tweenData.duration, tweenData.optionalBool0, tweenData.optionalScrambleMode, optionalString);
                    break;
                case TargetType.TextMeshPro:
                    tween =
 ((TextMeshPro)tweenData.target).DOText(tweenData.duration, tweenData.duration, tweenData.optionalBool0, tweenData.optionalScrambleMode, optionalString);
                    break;
                }
#endif
                    break;
                case DOTweenAnimation.AnimationType.PunchPosition:
                    switch (tweenData.targetType)
                    {
                        case DOTweenAnimation.TargetType.Transform:
                            tween = ((Transform)tweenData.target).DOPunchPosition(tweenData.endValueV3,
                                tweenData.duration, tweenData.optionalInt0,
                                tweenData.optionalFloat0, tweenData.optionalBool0);
                            break;
#if true // UI_MARKER
                        case DOTweenAnimation.TargetType.RectTransform:
                            tween = ((RectTransform)tweenData.target).DOPunchAnchorPos(tweenData.endValueV3,
                                tweenData.duration, tweenData.optionalInt0,
                                tweenData.optionalFloat0, tweenData.optionalBool0);
                            break;
#endif
                    }

                    break;
                case DOTweenAnimation.AnimationType.PunchScale:
                    tween = tweenGO.transform.DOPunchScale(tweenData.endValueV3, tweenData.duration,
                        tweenData.optionalInt0, tweenData.optionalFloat0);
                    break;
                case DOTweenAnimation.AnimationType.PunchRotation:
                    tween = tweenGO.transform.DOPunchRotation(tweenData.endValueV3, tweenData.duration,
                        tweenData.optionalInt0, tweenData.optionalFloat0);
                    break;
                case DOTweenAnimation.AnimationType.ShakePosition:
                    switch (tweenData.targetType)
                    {
                        case DOTweenAnimation.TargetType.Transform:
                            tween = ((Transform)tweenData.target).DOShakePosition(tweenData.duration,
                                tweenData.endValueV3, tweenData.optionalInt0,
                                tweenData.optionalFloat0, tweenData.optionalBool0, tweenData.optionalBool1,
                                tweenData.optionalShakeRandomnessMode);
                            break;
#if true // UI_MARKER
                        case DOTweenAnimation.TargetType.RectTransform:
                            tween = ((RectTransform)tweenData.target).DOShakeAnchorPos(tweenData.duration,
                                tweenData.endValueV3, tweenData.optionalInt0,
                                tweenData.optionalFloat0, tweenData.optionalBool0, tweenData.optionalBool1,
                                tweenData.optionalShakeRandomnessMode);
                            break;
#endif
                    }

                    break;
                case DOTweenAnimation.AnimationType.ShakeScale:
                    tween = tweenGO.transform.DOShakeScale(tweenData.duration, tweenData.endValueV3,
                        tweenData.optionalInt0, tweenData.optionalFloat0,
                        tweenData.optionalBool1, tweenData.optionalShakeRandomnessMode);
                    break;
                case DOTweenAnimation.AnimationType.ShakeRotation:
                    tween = tweenGO.transform.DOShakeRotation(tweenData.duration, tweenData.endValueV3,
                        tweenData.optionalInt0, tweenData.optionalFloat0,
                        tweenData.optionalBool1, tweenData.optionalShakeRandomnessMode);
                    break;
                case DOTweenAnimation.AnimationType.CameraAspect:
                    tween = ((Camera)tweenData.target).DOAspect(tweenData.endValueFloat, tweenData.duration);
                    break;
                case DOTweenAnimation.AnimationType.CameraBackgroundColor:
                    tween = ((Camera)tweenData.target).DOColor(tweenData.endValueColor, tweenData.duration);
                    break;
                case DOTweenAnimation.AnimationType.CameraFieldOfView:
                    tween = ((Camera)tweenData.target).DOFieldOfView(tweenData.endValueFloat, tweenData.duration);
                    break;
                case DOTweenAnimation.AnimationType.CameraOrthoSize:
                    tween = ((Camera)tweenData.target).DOOrthoSize(tweenData.endValueFloat, tweenData.duration);
                    break;
                case DOTweenAnimation.AnimationType.CameraPixelRect:
                    tween = ((Camera)tweenData.target).DOPixelRect(tweenData.endValueRect, tweenData.duration);
                    break;
                case DOTweenAnimation.AnimationType.CameraRect:
                    tween = ((Camera)tweenData.target).DORect(tweenData.endValueRect, tweenData.duration);
                    break;
            }

            if (tween == null) return null;

            // Created

            if (tweenData.isFrom)
            {
                ((Tweener)tween).From(tweenData.isRelative);
            }
            else
            {
                tween.SetRelative(tweenData.isRelative);
            }

            GameObject setTarget = GetTweenTarget(tweenData);
            tween.SetTarget(setTarget).SetDelay(tweenData.delay).SetLoops(tweenData.loops, tweenData.loopType)
                .OnKill(() => tween = null);
            if (tweenData.isSpeedBased) tween.SetSpeedBased();
            if (tweenData.easeType == Ease.INTERNAL_Custom) tween.SetEase(tweenData.easeCurve);
            else tween.SetEase(tweenData.easeType);
            if (!string.IsNullOrEmpty(tweenData.id)) tween.SetId(tweenData.id);
            tween.SetUpdate(tweenData.isIndependentUpdate);

            if (tweenData.hasOnStart)
            {
                if (tweenData.onStart != null) tween.OnStart(tweenData.onStart.Invoke);
            }
            else tweenData.onStart = null;

            if (tweenData.hasOnPlay)
            {
                if (tweenData.onPlay != null) tween.OnPlay(tweenData.onPlay.Invoke);
            }
            else tweenData.onPlay = null;

            if (tweenData.hasOnUpdate)
            {
                if (tweenData.onUpdate != null) tween.OnUpdate(tweenData.onUpdate.Invoke);
            }
            else tweenData.onUpdate = null;

            if (tweenData.hasOnStepComplete)
            {
                if (tweenData.onStepComplete != null) tween.OnStepComplete(tweenData.onStepComplete.Invoke);
            }
            else tweenData.onStepComplete = null;

            if (tweenData.hasOnComplete)
            {
                if (tweenData.onComplete != null) tween.OnComplete(tweenData.onComplete.Invoke);
            }
            else tweenData.onComplete = null;

            if (tweenData.hasOnRewind)
            {
                if (tweenData.onRewind != null) tween.OnRewind(tweenData.onRewind.Invoke);
            }
            else tweenData.onRewind = null;

            if (andPlay) tween.Play();
            else tween.Pause();

            if (tweenData.hasOnTweenCreated && tweenData.onTweenCreated != null) tweenData.onTweenCreated.Invoke();

            return tween;
        }

        public Sequence CreateEditorPreview()
        {
            if (Application.isPlaying) return null;
            CreateTweenOrSequence();
            return sequence;
        }

        private GameObject GetTweenGO(TweenData tweenData)
        {
            return tweenData.targetIsSelf ? gameObject : tweenData.targetGO;
        }

        GameObject GetTweenTarget(TweenData tweenData)
        {
            return tweenData.targetIsSelf || !tweenData.tweenTargetIsTargetGO ? gameObject : tweenData.targetGO;
        }

        private static DOTweenAnimation.TargetType TypeToDoTargetType(Type t)
        {
            string str = t.ToString();
            int dotIndex = str.LastIndexOf(".", StringComparison.Ordinal);
            if (dotIndex != -1) str = str.Substring(dotIndex + 1);
            if (str.IndexOf("Renderer", StringComparison.Ordinal) != -1 && str != "SpriteRenderer") str = "Renderer";
//#if true // PHYSICS_MARKER
//            if (str == "Rigidbody") str = "Transform";
//#endif
//#if true // PHYSICS2D_MARKER
//            if (str == "Rigidbody2D") str = "Transform";
//#endif
#if true // UI_MARKER
//            if (str == "RectTransform") str = "Transform";
            if (str == "RawImage" || str == "Graphic")
                str = "Image"; // RawImages/Graphics are managed like Images for DOTweenAnimation (color and fade use Graphic target anyway)
#endif
            return (DOTweenAnimation.TargetType)Enum.Parse(typeof(DOTweenAnimation.TargetType), str);
        }
    }
}